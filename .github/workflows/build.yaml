name: Build

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review, review_requested]

jobs:
  # We are going to build an image specifically for testing and push it to ghcr.io (GitHub Container Registry)
  # This image is used throught the entire github workflow until it is built for final deployment
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-latest

    permissions:
      packages: write # Needed to push docker image to ghcr.io
      contents: read # Needed to read code in repository

    steps:
      # Docker buildx is useful for caching images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - id: set-var
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Build and Push Image to ghcr.io
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ghcr.io/${{ steps.set-var.outputs.lowercase }}:test
          cache-from: type=registry,ref=ghcr.io/${{ steps.set-var.outputs.lowercase }}:test
          cache-to: type=inline # Inline cache is stored in the registry, embedded into the main image, and is pulled alongside the main image.
          target: prerelease # This is the target stage in the Dockerfile
          labels: |
            org.opencontainers.image.title=Test Image
            org.opencontainers.image.description=Image used for testing
            org.opencontainers.image.source=ghcr.io/${{ steps.set-var.outputs.lowercase }}

  # We are going to run unit tests, integration tests, CVE scanning, smoke tests, and linting in parallel
  # lint:
  #   name: Eslint
  #   runs-on: ubuntu-latest
  #   needs: [build-test-image]

  #   permissions:
  #     packages: read # Needed to pull docker image from ghcr.io

  #   steps:
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ github.token }}

  #     - name: Run Linting
  #       run: docker run --rm ghcr.io/${{ github.repository }}:test bun run lint:eslint

  format:
    name: Prettier Format
    runs-on: ubuntu-latest
    needs: [build-test-image]

    permissions:
      packages: read # Needed to pull docker image from ghcr.io

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run Linting
        run: docker run --rm ghcr.io/${{ github.repository }}:test bun run lint:format

  spelling:
    name: Lint Spelling
    runs-on: ubuntu-latest
    needs: [build-test-image]

    permissions:
      packages: read # Needed to pull docker image from ghcr.io

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run Linting
        run: docker run --rm ghcr.io/${{ github.repository }}:test bun run lint:spelling

  # We are going to build an image specifically for final deployment and push it to ghcr.io (GitHub Container Registry)
  build-final-image:
    name: Build Image for Deployment (Production)
    runs-on: ubuntu-latest
    # TODO add lint as a need when bun fixes eval issue
    needs: [format, spelling]

    permissions:
      packages: write # Needed to push docker image to ghcr.io
      contents: read # Needed to read code in repository

    steps:
      # Docker buildx is useful for caching images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - id: set-var
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Build and Push Image to ghcr.io
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ghcr.io/${{ steps.set-var.outputs.lowercase }}:latest
             ghcr.io/${{ steps.set-var.outputs.lowercase }}:${{ github.head_ref }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:test
          cache-to: type=inline # Inline cache is stored in the registry, embedded into the main image, and is pulled alongside the main image.
          target: release # This is the target stage in the Dockerfile
          labels: |
            org.opencontainers.image.title=Production Image
            org.opencontainers.image.description=Image used for production
            org.opencontainers.image.source=ghcr.io/${{ steps.set-var.outputs.lowercase }}

  clean-old-images:
    name: Clean Old Images
    runs-on: ubuntu-latest
    needs: [build-final-image]

    permissions:
      packages: write

    steps:
      - uses: actions/delete-package-versions@v4
        with:
          owner: ${{ github.repository_owner }}
          package-name: ${{ github.event.repository.name }}
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true
